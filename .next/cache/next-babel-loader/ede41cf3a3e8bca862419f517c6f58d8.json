{"ast":null,"code":"/* /lib/auth.js */\nimport jwtDecode from \"jwt-decode\";\nimport Cookies from \"js-cookie\";\nimport Strapi from \"strapi-sdk-javascript/build/main\";\nimport Router from \"next/router\";\nvar apiUrl = process.env.API_URL || \"http://localhost:1337\";\nvar strapi = new Strapi(apiUrl);\nexport var strapiRegister = function strapiRegister(username, email, password) {\n  if (!true) {\n    return undefined;\n  }\n\n  strapi.register(username, email, password).then(function (res) {\n    setToken(res);\n  });\n  return Promise.resolve();\n}; //use strapi to get a JWT and token object, save\n//to approriate cookei for future requests\n\nexport var strapiLogin = function strapiLogin(email, password) {\n  if (!true) {\n    return;\n  } // Get a token\n\n\n  strapi.login(email, password).then(function (res) {\n    setToken(res);\n  });\n  return Promise.resolve();\n};\nexport var setToken = function setToken(token) {\n  if (!true) {\n    return;\n  }\n\n  Cookies.set(\"username\", token.user.username);\n  Cookies.set(\"jwt\", token.jwt);\n\n  if (Cookies.get(\"username\")) {\n    Router.push(\"/\");\n  }\n};\nexport var unsetToken = function unsetToken() {\n  if (!true) {\n    return;\n  }\n\n  Cookies.remove(\"jwt\");\n  Cookies.remove(\"username\");\n  Cookies.remove(\"cart\"); // to support logging out from all windows\n\n  window.localStorage.setItem(\"logout\", Date.now());\n  Router.push(\"/\");\n};\nexport var getUserFromServerCookie = function getUserFromServerCookie(req) {\n  if (!req.headers.cookie || \"\") {\n    return undefined;\n  }\n\n  var username = req.headers.cookie.split(\";\").find(function (user) {\n    return user.trim().startsWith(\"username=\");\n  });\n\n  if (username) {\n    username = username.split(\"=\")[1];\n  }\n\n  var jwtCookie = req.headers.cookie.split(\";\").find(function (c) {\n    return c.trim().startsWith(\"jwt=\");\n  });\n\n  if (!jwtCookie) {\n    return undefined;\n  }\n\n  var jwt = jwtCookie.split(\"=\")[1];\n  return jwtDecode(jwt), username;\n};\nexport var getUserFromLocalCookie = function getUserFromLocalCookie() {\n  return Cookies.get(\"username\");\n}; //these will be used if you expand to a provider such as Auth0\n\nvar getQueryParams = function getQueryParams() {\n  var params = {};\n  window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, function ($0, $1, $2, $3) {\n    params[$1] = $3;\n  });\n  return params;\n};\n\nexport var extractInfoFromHash = function extractInfoFromHash() {\n  if (!true) {\n    return undefined;\n  }\n\n  var _getQueryParams = getQueryParams(),\n      id_token = _getQueryParams.id_token,\n      state = _getQueryParams.state;\n\n  return {\n    token: id_token,\n    secret: state\n  };\n};","map":{"version":3,"sources":["/Users/Tim/Desktop/graphqlapollo/components/auth.js"],"names":["jwtDecode","Cookies","Strapi","Router","apiUrl","process","env","API_URL","strapi","strapiRegister","username","email","password","undefined","register","then","res","setToken","Promise","resolve","strapiLogin","login","token","set","user","jwt","get","push","unsetToken","remove","window","localStorage","setItem","Date","now","getUserFromServerCookie","req","headers","cookie","split","find","trim","startsWith","jwtCookie","c","getUserFromLocalCookie","getQueryParams","params","location","href","replace","$0","$1","$2","$3","extractInfoFromHash","id_token","state","secret"],"mappings":"AAAA;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AAEA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,OAAZ,IAAuB,uBAAtC;AACA,IAAMC,MAAM,GAAG,IAAIN,MAAJ,CAAWE,MAAX,CAAf;AAEA,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,EAA+B;AAC3D,MAAI,KAAJ,EAAsB;AACpB,WAAOC,SAAP;AACD;;AACDL,EAAAA,MAAM,CAACM,QAAP,CAAgBJ,QAAhB,EAA0BC,KAA1B,EAAiCC,QAAjC,EAA2CG,IAA3C,CAAgD,UAAAC,GAAG,EAAI;AACrDC,IAAAA,QAAQ,CAACD,GAAD,CAAR;AACD,GAFD;AAGA,SAAOE,OAAO,CAACC,OAAR,EAAP;AACD,CARM,C,CASP;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACT,KAAD,EAAQC,QAAR,EAAqB;AAC9C,MAAI,KAAJ,EAAsB;AACpB;AACD,GAH6C,CAI9C;;;AACAJ,EAAAA,MAAM,CAACa,KAAP,CAAaV,KAAb,EAAoBC,QAApB,EAA8BG,IAA9B,CAAmC,UAAAC,GAAG,EAAI;AACxCC,IAAAA,QAAQ,CAACD,GAAD,CAAR;AACD,GAFD;AAGA,SAAOE,OAAO,CAACC,OAAR,EAAP;AACD,CATM;AAWP,OAAO,IAAMF,QAAQ,GAAG,SAAXA,QAAW,CAAAK,KAAK,EAAI;AAC/B,MAAI,KAAJ,EAAsB;AACpB;AACD;;AACDrB,EAAAA,OAAO,CAACsB,GAAR,CAAY,UAAZ,EAAwBD,KAAK,CAACE,IAAN,CAAWd,QAAnC;AACAT,EAAAA,OAAO,CAACsB,GAAR,CAAY,KAAZ,EAAmBD,KAAK,CAACG,GAAzB;;AAEA,MAAIxB,OAAO,CAACyB,GAAR,CAAY,UAAZ,CAAJ,EAA6B;AAC3BvB,IAAAA,MAAM,CAACwB,IAAP,CAAY,GAAZ;AACD;AACF,CAVM;AAYP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9B,MAAI,KAAJ,EAAsB;AACpB;AACD;;AACD3B,EAAAA,OAAO,CAAC4B,MAAR,CAAe,KAAf;AACA5B,EAAAA,OAAO,CAAC4B,MAAR,CAAe,UAAf;AACA5B,EAAAA,OAAO,CAAC4B,MAAR,CAAe,MAAf,EAN8B,CAQ9B;;AACAC,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,QAA5B,EAAsCC,IAAI,CAACC,GAAL,EAAtC;AACA/B,EAAAA,MAAM,CAACwB,IAAP,CAAY,GAAZ;AACD,CAXM;AAaP,OAAO,IAAMQ,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,GAAG,EAAI;AAC5C,MAAI,CAACA,GAAG,CAACC,OAAJ,CAAYC,MAAb,IAAuB,EAA3B,EAA+B;AAC7B,WAAOzB,SAAP;AACD;;AAED,MAAIH,QAAQ,GAAG0B,GAAG,CAACC,OAAJ,CAAYC,MAAZ,CACZC,KADY,CACN,GADM,EAEZC,IAFY,CAEP,UAAAhB,IAAI;AAAA,WAAIA,IAAI,CAACiB,IAAL,GAAYC,UAAZ,CAAuB,WAAvB,CAAJ;AAAA,GAFG,CAAf;;AAGA,MAAIhC,QAAJ,EAAc;AACZA,IAAAA,QAAQ,GAAGA,QAAQ,CAAC6B,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAX;AACD;;AAED,MAAMI,SAAS,GAAGP,GAAG,CAACC,OAAJ,CAAYC,MAAZ,CACfC,KADe,CACT,GADS,EAEfC,IAFe,CAEV,UAAAI,CAAC;AAAA,WAAIA,CAAC,CAACH,IAAF,GAASC,UAAT,CAAoB,MAApB,CAAJ;AAAA,GAFS,CAAlB;;AAGA,MAAI,CAACC,SAAL,EAAgB;AACd,WAAO9B,SAAP;AACD;;AACD,MAAMY,GAAG,GAAGkB,SAAS,CAACJ,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAZ;AACA,SAAOvC,SAAS,CAACyB,GAAD,CAAT,EAAgBf,QAAvB;AACD,CApBM;AAsBP,OAAO,IAAMmC,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AAC1C,SAAO5C,OAAO,CAACyB,GAAR,CAAY,UAAZ,CAAP;AACD,CAFM,C,CAIP;;AACA,IAAMoB,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,MAAM,GAAG,EAAf;AACAjB,EAAAA,MAAM,CAACkB,QAAP,CAAgBC,IAAhB,CAAqBC,OAArB,CACE,2BADF,EAEE,UAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAoB;AAClBP,IAAAA,MAAM,CAACK,EAAD,CAAN,GAAaE,EAAb;AACD,GAJH;AAMA,SAAOP,MAAP;AACD,CATD;;AAUA,OAAO,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AACvC,MAAI,KAAJ,EAAsB;AACpB,WAAO1C,SAAP;AACD;;AAHsC,wBAIXiC,cAAc,EAJH;AAAA,MAI/BU,QAJ+B,mBAI/BA,QAJ+B;AAAA,MAIrBC,KAJqB,mBAIrBA,KAJqB;;AAKvC,SAAO;AAAEnC,IAAAA,KAAK,EAAEkC,QAAT;AAAmBE,IAAAA,MAAM,EAAED;AAA3B,GAAP;AACD,CANM","sourcesContent":["/* /lib/auth.js */\n\nimport jwtDecode from \"jwt-decode\";\nimport Cookies from \"js-cookie\";\nimport Strapi from \"strapi-sdk-javascript/build/main\";\n\nimport Router from \"next/router\";\n\nconst apiUrl = process.env.API_URL || \"http://localhost:1337\";\nconst strapi = new Strapi(apiUrl);\n\nexport const strapiRegister = (username, email, password) => {\n  if (!process.browser) {\n    return undefined;\n  }\n  strapi.register(username, email, password).then(res => {\n    setToken(res);\n  });\n  return Promise.resolve();\n};\n//use strapi to get a JWT and token object, save\n//to approriate cookei for future requests\nexport const strapiLogin = (email, password) => {\n  if (!process.browser) {\n    return;\n  }\n  // Get a token\n  strapi.login(email, password).then(res => {\n    setToken(res);\n  });\n  return Promise.resolve();\n};\n\nexport const setToken = token => {\n  if (!process.browser) {\n    return;\n  }\n  Cookies.set(\"username\", token.user.username);\n  Cookies.set(\"jwt\", token.jwt);\n\n  if (Cookies.get(\"username\")) {\n    Router.push(\"/\");\n  }\n};\n\nexport const unsetToken = () => {\n  if (!process.browser) {\n    return;\n  }\n  Cookies.remove(\"jwt\");\n  Cookies.remove(\"username\");\n  Cookies.remove(\"cart\");\n\n  // to support logging out from all windows\n  window.localStorage.setItem(\"logout\", Date.now());\n  Router.push(\"/\");\n};\n\nexport const getUserFromServerCookie = req => {\n  if (!req.headers.cookie || \"\") {\n    return undefined;\n  }\n\n  let username = req.headers.cookie\n    .split(\";\")\n    .find(user => user.trim().startsWith(\"username=\"));\n  if (username) {\n    username = username.split(\"=\")[1];\n  }\n\n  const jwtCookie = req.headers.cookie\n    .split(\";\")\n    .find(c => c.trim().startsWith(\"jwt=\"));\n  if (!jwtCookie) {\n    return undefined;\n  }\n  const jwt = jwtCookie.split(\"=\")[1];\n  return jwtDecode(jwt), username;\n};\n\nexport const getUserFromLocalCookie = () => {\n  return Cookies.get(\"username\");\n};\n\n//these will be used if you expand to a provider such as Auth0\nconst getQueryParams = () => {\n  const params = {};\n  window.location.href.replace(\n    /([^(?|#)=&]+)(=([^&]*))?/g,\n    ($0, $1, $2, $3) => {\n      params[$1] = $3;\n    }\n  );\n  return params;\n};\nexport const extractInfoFromHash = () => {\n  if (!process.browser) {\n    return undefined;\n  }\n  const { id_token, state } = getQueryParams();\n  return { token: id_token, secret: state };\n};"]},"metadata":{},"sourceType":"module"}